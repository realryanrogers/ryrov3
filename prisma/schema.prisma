// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
  shadowDatabaseUrl = env("NEXT_PUBLIC_SHADOW_DATABASE_URL")
}

model WeighIn {
  id Int @id @default(autoincrement())
  date DateTime @db.Date @unique
  weight Float
}

model FinishLocation {
  id Int @id @default(autoincrement())
  code String @unique
  name String 
  finishes Finish[]
}

model Finish {
  id Int @id @default(autoincrement())
  finishLocationId Int
  location FinishLocation @relation(fields: [finishLocationId], references: [id])
  soloSessions SoloSession?
  encounter Encounter? @relation(fields: [encounterid], references: [id])
  encounterid Int?
  rating Int
  volume Int
  strength Int
}

model SoloSession {
  id Int @id @default(autoincrement())
  finishId Int? @unique
  finish Finish? @relation(fields: [finishId], references: [id])
  datetime DateTime @db.DateTime
  TimeElapsed Int
  enhanced Boolean
  rating Int
  notes String? @db.Text
}

model Encounter {
  id Int @id @default(autoincrement())
  finishId Int? @unique
  finish Finish[] @relation()
  datetime DateTime @db.DateTime
  TimeElapsed Int
  enhanced Boolean
  rating Int
  notes String? @db.Text
  activitiesId Int
  activities EncounterActivities[]
}

model EncounterActivities {
  id Int @id @default(autoincrement())
  code String @unique
  name String
  encounter Encounter[]
}

model Poop {
  id Int @id @default(autoincrement())
  datetime DateTime @db.DateTime
  volume Int
  difficulty Int
  hardness Int
}